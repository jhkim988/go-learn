syntax = "proto3"; // protobuf 버전 명시

package log.v1; // protoc로 생성된 고 코드의 패키지명, 같은 이름을 가진 메세지 자료형 사이의 충돌을 막아준다.

option go_package = "github.com/jhkim988/api/log_v1";

// Go struct 에 대응된다.
// [자료형] [변수명] = [Field ID]
// 필드 번호를 바꾸면 안된다. 번호로 버전관리 가능
// log.v1 에서 v1 이 메이저 버전이다. 호환성을 깨고 다음 버전을 만들려면 api/v2 에 새로운 메세지를 추가한다.
message Record {
  bytes value = 1;
  uint64 offset = 2;
  uint64 term = 3;
  uint32 type = 4;
}

// protobuf 를 원하는 언어로 컴파일하려면 해당 언어의 런타임이 필요하다.
// go 에서는 Go APIv2
// go get google.golang.org/protobuf/...

// 컴파일 명령어
// protoc api/v1/*.proto --go_out=. --go_opt=paths=resource-relative --proto_path=.

// Makefile 을 만들어두면 편리하다.


// gRPC: RPC 엔드포인트를 묶은 그룹.
// 서비스를 protobuf 로 정의하고 프로토콜 버퍼를 클라이언트와 서버로 된 코드로 컴파일하여 구현한다.
service Log {
  rpc Produce(ProduceRequest) returns (ProduceResponse) {}
  rpc Consume(ConsumeRequest) returns (ConsumeResponse) {}
  rpc ConsumeStream(ConsumeRequest) returns (stream ConsumeResponse) {} // 서버 측 스트리밍, 서버는 연속한 메세지들을 읽을 수 있는 스트림을 보내준다.
  rpc ProduceStream(stream ProduceRequest) returns (stream ProduceResponse) {} // 양방향 스트리밍 RPC, 서로 독립적인 스트림이므로, 원하는 순서로 주고 받을 수 있다.
  rpc GetServers(GetServersRequest) returns (GetServersResponse) {} // 각 서버의 주소와 서버가 리더인지 여부를 알 수 있는 메서드
}

message ProduceRequest {
  Record record = 1;
}

message ProduceResponse {
  uint64 offset = 1;
}

message ConsumeRequest {
  uint64 offset = 1;
}

message ConsumeResponse {
  Record record = 1;
}

message GetServersRequest{}

message GetServersResponse {
  repeated Server servers = 1;
}

message Server {
  string id = 1;
  string rpc_addr = 2;
  bool is_leader = 3;
}